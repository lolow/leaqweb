#######################
# ETEM model for LEAQ #
#######################
# Version 3.0.1
# Maintainer: L. Drouet
#######################

param nb_periods    >=1;
param period_length >=1;     # expressed in year.

set T := 1..nb_periods;      # time periods
set S;                       # slice periods
set P;                       # processes
set C;                       # commodities
set DEM within C;            # useful demands
set IMPORT within C;         # imported commodities
set EXPORT within C;         # exported commodities
set FLOW;                    # commodities groups labels
set FLOW_IN{P} within FLOW;  # incoming flows 
set FLOW_OUT{P} within FLOW; # outcoming flows
set C_ITEMS{FLOW} within C;  # set of commodities
set AGG;                     # aggregates
set C_AGG{AGG} within C;     # set of aggregated commodities
set MARKET;                  # markets
set P_MARKET{MARKET} within P;

# COMPUTED SETS
set C_MAP{p in P}  within C := setof{f in FLOW_IN[p], c in C_ITEMS[f]}(c) union setof{f in FLOW_OUT[p], c in C_ITEMS[f]}(c); 
set P_PROD{c in C} within P := setof{p in P, f in FLOW_OUT[p]: c in C_ITEMS[f]}(p);
set P_CONS{c in C} within P := setof{p in P, f in FLOW_IN[p]: c in C_ITEMS[f]}(p);

# GIVEN PARAMETERS
param discount_rate;
param first_year;
param act_flo{P,C};                 # conversion factor from flow to activity.
param agg_coef{C,AGG};              # coefficient factor in aggregate
param avail_factor{S,P};            # availability factor
param avail{P};                     # availability period.
param cap_act{P};                   # conversion factor from capacity to activity
param cost_delivery{T,S,P,C};       # delivery cost of a commodity for a process
param cost_exp{T,S,C};              # export costs.
param cost_fom{T,P};                # operation and maintenance fixed cost.
param cost_icap{T,P};               # investment cost of one capacity unit.
param cost_imp{T,S,C};              # import costs.
param cost_vom{T,P};                # operation and maintenance variable cost.
param demand{T,DEM};                # useful demand.
param eff_flo{FLOW,FLOW};           # efficiency ratio for a specified process between 2 flows.
param fixed_cap{T,P};               # fixed capacity (residual cap.).
param flow_act{P} symbolic in FLOW; # flow which define process activity
param flo_share_fx{FLOW,C};         # fixed flow share of c in the total flow
param flo_share_lo{FLOW,C};         # lower bound of the flow share of c in the total flow
param flo_share_up{FLOW,C};         # upper bound of the flow share of c in the total flow
param fraction{S};                  # fraction of the year (for capacities).
param frac_dem{S,DEM};              # fraction of the year (for demands).
param life{P};                      # process life duration expressed in periods.
param network_efficiency{C};        # infrastructure efficiency
param peak_prod{P,S,C};             # ration on production which can be use at peak period
param peak_reserve{T,S,C};          # reserve on production

param act_bnd_fx{T,S,P};            # fixed activity
param act_bnd_lo{T,S,P};            # lower bound on activity
param act_bnd_up{T,S,P};            # upper bound on activity
param cap_bnd_fx{T,P};              # fixed capacity
param cap_bnd_lo{T,P};              # lower bound on capacity
param cap_bnd_up{T,P};              # upper bound on capacity
param com_net_bnd_up_ts{T,S,C};     # upper bound on total net amount
param com_net_bnd_up_t{T,C};        # upper bound on total net amount
param exp_bnd_fx{T,S,EXPORT};       # fixed exportation
param exp_bnd_lo{T,S,EXPORT};       # lower bound on exportation
param exp_bnd_up{T,S,EXPORT};       # upper bound on exportation
param flo_bnd_fx{T,S,FLOW};         # fixed flow
param flo_bnd_lo{T,S,FLOW};         # lower bound on flow
param flo_bnd_up{T,S,FLOW};         # upper bound on flow
param icap_bnd_fx{T,P};             # fixed new capacity
param icap_bnd_lo{T,P};             # lower bound on new capacity
param icap_bnd_up{T,P};             # upper bound on new capacity
param imp_bnd_fx{T,S,IMPORT};       # fixed importation
param imp_bnd_lo{T,S,IMPORT};       # lower bound on importation
param imp_bnd_up{T,S,IMPORT};       # upper bound on importation
param aggregate_annual_up{T,AGG};
param aggregate_annual_lo{T,AGG};
param aggregate_annual_fx{T,AGG};
param degree_of_use{T,C,AGG};
param rate_of_penetration{T,C};
param market_share_bnd_up{T,MARKET,MARKET};
param market_share_bnd_lo{T,MARKET,MARKET};
param market_share_bnd_fx{T,MARKET,MARKET};

param market{P,MARKET};                  # =1 if the process p belongs to the market m
param renewal_rate{T,MARKET};            # renewal rate in market m

# COMPUTED PARAMETERS
param nb_completed_years{t in T} := # number of completed years
  (t-1)*period_length;
param annualized :=                 # factor to annualize a period
  sum{y in 1..period_length} (1+discount_rate)**(1-y); 
param salvage{t in T, p in P} :=    # parameter used for salvage value
   (1-(1+discount_rate)**(-period_length*(t+life[p]-nb_periods-1)))
  /(  (1+discount_rate)**( period_length*(nb_periods+1-t)))
  /(1-(1+discount_rate)**(-period_length*life[p]));
param year{t in T} :=           # convert period into year
  first_year + (t-1) * period_length;

# VARIABLES (objective part)
var VAR_OBJINV >=0;      # investment part of objective function.
var VAR_OBJFIX >=0;      # fixed costs part of objective function.
var VAR_OBJVAR >=0;      # variable costs part of objective function.
var VAR_OBJSAL >=0;      # salvage value part of objective function.

# VARIABLES (decisions)
var VAR_ICAP{T,P}   >=0;               # investment capacity
var VAR_IMP{T,S,IMPORT}  >=0;             # import activities
var VAR_EXP{T,S,EXPORT}  >=0;             # export activities
var VAR_COM{T,S,p in P,C_MAP[p]}>=0;   # commodity flow
var VAR_AGG{T,S,AGG}>=0;               # aggregate activities

###
### Objective function
###

minimize OBJECTIVE : VAR_OBJINV + VAR_OBJFIX + VAR_OBJVAR - VAR_OBJSAL +
0.00001 * sum{a in AGG, t in T, s in S} VAR_AGG[t,s,a];

###
### Constraints
###

# Objective function constraints

subject to EQ_OBJINV : 
  VAR_OBJINV = sum{t in T, p in P} cost_icap[t,p]*VAR_ICAP[t,p]/((1+discount_rate)**(nb_completed_years[t]));

subject to EQ_OBJFIX :
  VAR_OBJFIX = sum{t in T, p in P} annualized*cost_fom[t,p]*
               (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]} VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p]
               /((1+discount_rate)**(nb_completed_years[t]));

subject to EQ_OBJVAR :
  VAR_OBJVAR = sum{t in T} annualized*
    ( 
      sum{s in S} (
        sum{p in P} cost_vom[t,p] * 
                    sum{c in C_ITEMS[flow_act[p]]} VAR_COM[t,s,p,c]/act_flo[p,c] # activity[t,s,p] 
       +sum{c in IMPORT} cost_imp[t,s,c] * VAR_IMP[t,s,c]
       -sum{c in EXPORT} cost_exp[t,s,c] * VAR_EXP[t,s,c]
       +sum{p in P, c in C_MAP[p]} cost_delivery[t,s,p,c] * VAR_COM[t,s,p,c]
      )
    )
    /((1+discount_rate)**(nb_completed_years[t]));

subject to EQ_OBJSAL :
  VAR_OBJSAL = sum{t in T, p in P : t>=avail[p] and t+life[p]>nb_periods+1}
    salvage[t,p]*cost_icap[t,p]*VAR_ICAP[t,p]/((1+discount_rate)**(nb_completed_years[t]));

# Basic commodity balance equations (by type) ensuring that production >=/= consumption
subject to EQ_COMBAL {t in T, s in S, c in C} :
  (sum {p in P_PROD[c]} VAR_COM[t,s,p,c] +
	if c in IMPORT then
		VAR_IMP[t,s,c]
	else
		0
   )*network_efficiency[c]
  >=
  if c not in DEM then 
    sum{p in P_CONS[c]} VAR_COM[t,s,p,c] + 
	if c in EXPORT then
		VAR_EXP[t,s,c]
	else
	 	0
  else
    frac_dem[s,c]*demand[t,c];

# capacity utilization equation
subject to EQ_CAPACT {t in T, s in S, p in P} :
  sum{c in C_ITEMS[flow_act[p]]} VAR_COM[t,s,p,c]/act_flo[p,c] # activity[t,s,p]
   <= avail_factor[s,p]*cap_act[p]*fraction[s]*
  (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]); # capacity[t,p]

# flow to flow transformation constraint
subject to EQ_PTRANS {t in T, s in S, p in P, cg_in in FLOW_IN[p], cg_out in FLOW_OUT[p]: 
    eff_flo[cg_in,cg_out]>0} :
  sum{c_o in C_ITEMS[cg_out]} VAR_COM[t,s,p,c_o]
= eff_flo[cg_in,cg_out] *
  sum{c_i in C_ITEMS[cg_in]} VAR_COM[t,s,p,c_i];

# market/product share limit constraints
subject to EQ_SHR_LO {t in T, s in S, p in P, cg in FLOW_IN[p] union FLOW_OUT[p], c in C_ITEMS[cg] : flo_share_lo[cg,c]>0} :
VAR_COM[t,s,p,c] >= flo_share_lo[cg,c]*sum{cc in C_ITEMS[cg]} VAR_COM[t,s,p,cc];

subject to EQ_SHR_UP {t in T, s in S, p in P, cg in FLOW_IN[p] union FLOW_OUT[p], c in C_ITEMS[cg] : flo_share_up[cg,c]>0} :
VAR_COM[t,s,p,c] <= flo_share_up[cg,c]*sum{cc in C_ITEMS[cg]} VAR_COM[t,s,p,cc];

subject to EQ_SHR_FX {t in T, s in S, p in P, cg in FLOW_IN[p] union FLOW_OUT[p], c in C_ITEMS[cg] : flo_share_fx[cg,c]>0} :
VAR_COM[t,s,p,c]  = flo_share_fx[cg,c]*sum{cc in C_ITEMS[cg]} VAR_COM[t,s,p,cc];

# peak activity equations
subject to EQ_PEAK {t in T, s in S, c in C:peak_reserve[t,s,c]>0} :
  1/(1+peak_reserve[t,s,c])*(
      sum{p in P_PROD[c] : c in C_ITEMS[flow_act[p]]} cap_act[p]*act_flo[p,c]*peak_prod[p,s,c]*fraction[s]*
                              (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p] 
    + sum{p in P_PROD[c] : c not in C_ITEMS[flow_act[p]]} peak_prod[p,s,c]*VAR_COM[t,s,p,c] 
    + if c in IMPORT then
		VAR_IMP[t,s,c]
	else
		0
  )
  >=
  sum{p in P_CONS[c]} VAR_COM[t,s,p,c] + 	
    if c in EXPORT then
		VAR_EXP[t,s,c]
	else
	 	0;

# activity bound constraints
subject to EQ_ACT_LO {t in T, s in S, p in P : act_bnd_lo[t,s,p]>0} :
  sum{c in C_ITEMS[flow_act[p]]} VAR_COM[t,s,p,c]/act_flo[p,c] # activity[t,s,p]
   >= act_bnd_lo[t,s,p];

subject to EQ_ACT_UP {t in T, s in S, p in P : act_bnd_up[t,s,p]>=0} :
  sum{c in C_ITEMS[flow_act[p]]} VAR_COM[t,s,p,c]/act_flo[p,c] # activity[t,s,p]
   <= act_bnd_up[t,s,p];

subject to EQ_ACT_FX {t in T, s in S, p in P : act_bnd_fx[t,s,p]>=0} :
  sum{c in C_ITEMS[flow_act[p]]} VAR_COM[t,s,p,c]/act_flo[p,c] # activity[t,s,p]
   = act_bnd_fx[t,s,p];


# importation bound constraints
subject to EQ_IMP_LO {t in T, s in S, c in IMPORT : imp_bnd_lo[t,s,c]>0} :
VAR_IMP[t,s,c] >= imp_bnd_lo[t,s,c];

subject to EQ_IMP_UP {t in T, s in S, c in IMPORT : imp_bnd_up[t,s,c]>=0} :
VAR_IMP[t,s,c] <= imp_bnd_up[t,s,c];

subject to EQ_IMP_FX {t in T, s in S, c in IMPORT : imp_bnd_fx[t,s,c]>=0} :
VAR_IMP[t,s,c] = imp_bnd_fx[t,s,c];

# exportation bound constraints
subject to EQ_EXP_LO {t in T, s in S, c in EXPORT : exp_bnd_lo[t,s,c]>0} :
VAR_EXP[t,s,c] >= exp_bnd_lo[t,s,c];

subject to EQ_EXP_UP {t in T, s in S, c in EXPORT : exp_bnd_up[t,s,c]>=0} :
VAR_EXP[t,s,c] <= exp_bnd_up[t,s,c];

subject to EQ_EXP_FX {t in T, s in S, c in EXPORT : exp_bnd_fx[t,s,c]>=0} :
VAR_EXP[t,s,c] = exp_bnd_fx[t,s,c];

# flow bound constraints
subject to EQ_FLO_LO {t in T, s in S, p in P, cg in FLOW_IN[p] union FLOW_OUT[p] : flo_bnd_lo[t,s,cg]>0} :
sum {c in C_ITEMS[cg]} VAR_COM[t,s,p,c] >= flo_bnd_lo[t,s,cg];

subject to EQ_FLO_UP {t in T, s in S, p in P, cg in FLOW_IN[p] union FLOW_OUT[p] : flo_bnd_up[t,s,cg]>0} :
sum {c in C_ITEMS[cg]} VAR_COM[t,s,p,c] <= flo_bnd_up[t,s,cg];

subject to EQ_FLO_FX {t in T, s in S, p in P, cg in FLOW_IN[p] union FLOW_OUT[p] : flo_bnd_fx[t,s,cg]>0} :
sum {c in C_ITEMS[cg]} VAR_COM[t,s,p,c] = flo_bnd_fx[t,s,cg];


# new capacity bound constraints
subject to EQ_ICAP_LO {t in T, p in P : icap_bnd_lo[t,p]>0} :
VAR_ICAP[t,p] >= icap_bnd_lo[t,p];

subject to EQ_ICAP_UP {t in T,  p in P : icap_bnd_up[t,p]>=0} :
VAR_ICAP[t,p] <= icap_bnd_up[t,p];

subject to EQ_ICAP_FX {t in T, p in P : icap_bnd_fx[t,p]>=0} :
VAR_ICAP[t,p] = icap_bnd_fx[t,p];

# capacity bound constraints
subject to EQ_CAP_LO {t in T, p in P : cap_bnd_lo[t,p]>0} :
    sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p] # capacity[t,p]
     >= cap_bnd_lo[t,p];

subject to EQ_CAP_UP {t in T, p in P : cap_bnd_up[t,p]>=0} :
	sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p] # capacity[t,p]
	 <= cap_bnd_up[t,p];

subject to EQ_CAP_FX {t in T, p in P : cap_bnd_fx[t,p]>=0} :
	sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p] # capacity[t,p]
	 = cap_bnd_fx[t,p];

# net amount bound constraints per time slice (t,s)
subject to EQ_COM_NET_UP_TS {t in T, s in S, c in C : com_net_bnd_up_ts[t,s,c]>=0} :
	(sum{p in P_PROD[c]} VAR_COM[t,s,p,c] + if c in IMPORT then VAR_IMP[t,s,c] else 0) - # procurement
	(sum{p in P_CONS[c]} VAR_COM[t,s,p,c] + if c in EXPORT then VAR_EXP[t,s,c] else 0)   # disposal
	 <= com_net_bnd_up_ts[t,s,c];

# net amount bound constraints per time period (t)
subject to EQ_COM_NET_UP_T {t in T, c in C : com_net_bnd_up_t[t,c]>=0} :
    sum{s in S}(
	 (sum{p in P_PROD[c]} VAR_COM[t,s,p,c] + if c in IMPORT then VAR_IMP[t,s,c] else 0) - # procurement
	 (sum{p in P_CONS[c]} VAR_COM[t,s,p,c] + if c in EXPORT then VAR_EXP[t,s,c] else 0)   # disposal
	) <= com_net_bnd_up_t[t,c];

# aggregate commodities
subject to EQ_AGG{t in T, s in S, agg in AGG} :
    VAR_AGG[t,s,agg] = sum{c in C_AGG[agg]} agg_coef[c,agg] *(
	 (sum{p in P_PROD[c]} VAR_COM[t,s,p,c] + if c in IMPORT then VAR_IMP[t,s,c] else 0) # procurement
	);

subject to EQ_AGG_UP_T{t in T, agg in AGG : aggregate_annual_up[t,agg]>=0} :
    sum{s in S} VAR_AGG[t,s,agg] <= aggregate_annual_up[t,agg];

subject to EQ_DEGREE_OF_USE{t in T, agg in AGG, c in C_AGG[agg] : degree_of_use[t,c,agg] > 0 } :
    agg_coef[c,agg] * (sum{s in S}
    (sum{p in P_CONS[c]} VAR_COM[t,s,p,c] + if c in EXPORT then VAR_EXP[t,s,c] else 0)   # disposal
    ) <=
    degree_of_use[t,c,agg] * sum{s in S} VAR_AGG[t,s,agg];

subject to EQ_RATE_OF_PENETRATION{t in T, c in C : t > 1 and rate_of_penetration[t,c] <> 0} :
    (sum{s in S}
    (sum{p in P_CONS[c]} VAR_COM[t,s,p,c] + if c in EXPORT then VAR_EXP[t,s,c] else 0)   # disposal
     ) <= (1+rate_of_penetration[t,c]) * (sum{s in S}
    (sum{p in P_CONS[c]} VAR_COM[t,s,p,c] + if c in EXPORT then VAR_EXP[t,s,c] else 0)   # disposal
     );

subject to EQ_MARKET_SHARE_BND_UP{t in T, sub_m in MARKET, m in MARKET : market_share_bnd_up[t,sub_m,m] > 0 }:
    sum{p in P_MARKET[sub_m]}
    (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p]
    <= market_share_bnd_up[t,sub_m,m] * sum{p in P_MARKET[m]}
    (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p]
    ;

subject to EQ_MARKET_SHARE_BND_LO{t in T, sub_m in MARKET, m in MARKET : market_share_bnd_lo[t,sub_m,m] > 0 }:
    sum{p in P_MARKET[sub_m]}
    (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p]
    >= market_share_bnd_lo[t,sub_m,m] * sum{p in P_MARKET[m]}
    (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p]
    ;

subject to EQ_MARKET_SHARE_BND_FX{t in T, sub_m in MARKET, m in MARKET : market_share_bnd_fx[t,sub_m,m] > 0 }:
    sum{p in P_MARKET[sub_m]}
    (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p]
    = market_share_bnd_fx[t,sub_m,m] * sum{p in P_MARKET[m]}
    (sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]}VAR_ICAP[t1,p]+fixed_cap[t,p]) # capacity[t,p]
    ;

###
### Solve statement
###

solve;

###
### Output parameters
###

# Relationship between process activity & individual primary commodity flows
param activity{t in T,s in S, p in P} := sum{c in C_ITEMS[flow_act[p]]} VAR_COM[t,s,p,c]/act_flo[p,c];

# Capacity transfer
param capacity{t in T, p in P} := sum{t1 in 1..t : t1>=t-life[p]+1 and t1>=avail[p]} VAR_ICAP[t1,p]+fixed_cap[t,p];

# Commodity production
param production{t in T, s in S, c in C} := sum{ p in P_PROD[c] inter P } VAR_COM[t,s,p,c];

param consumption{t in T, s in S, c in C} := sum{ p in P_CONS[c] inter P } VAR_COM[t,s,p,c];

# Commodity procurement
param procurement{t in T, s in S, c in C} := sum{ p in P_PROD[c] } VAR_COM[t,s,p,c] + if c in IMPORT then VAR_IMP[t,s,c] else 0;

# Commodity disposal
param disposal{t in T, s in S, c in C} := sum{ p in P_CONS[c] } VAR_COM[t,s,p,c] + if c in EXPORT then VAR_EXP[t,s,c] else 0;

# Commodity net amount
param total_net_amount{t in T, s in S, c in C} := procurement[t,s,c] - disposal[t,s,c];

#
# All outputs
#
#

printf "attribute,T,S,P,C,value\n";

#Without index
printf "VAR_OBJINV,,,,,%f\n", VAR_OBJINV;
printf "VAR_OBJFIX,,,,,%f\n", VAR_OBJFIX;
printf "VAR_OBJVAR,,,,,%f\n", VAR_OBJVAR;
printf "VAR_OBJSAL,,,,,%f\n", VAR_OBJSAL;

#T,P
for {t in T, p in P: capacity[t,p]<>0}{
  printf "CAPACITY,%s,,%s,,%f\n", year[t], p , capacity[t,p];
}

#T,P
for {t in T, p in P:VAR_ICAP[t,p]<>0}{
  printf "VAR_ICAP,%s,,%s,,%f\n", year[t] , p , VAR_ICAP[t,p];
}

#T, S, P
for {t in T, s in S, p in P:activity[t,s,p]<>0}{
  printf "ACTIVITY,%s,%s,%s,,%f\n", year[t], s, p , activity[t,s,p];
}
for {t in T,p in P:(sum {s in S} activity[t,s,p])<>0}{
  printf "ACTIVITY,%s,ANNUAL,%s,,%f\n", year[t] , p , sum {s in S} activity[t,s,p];
}

#T, S, C
for {t in T, s in S, c in IMPORT:VAR_IMP[t,s,c] <> 0}{
  printf "VAR_IMP,%s,%s,,%s,%f\n", t, s, c, VAR_IMP[t,s,c];
}
for {t in T, c in IMPORT:(sum {s in S}VAR_IMP[t,s,c]) <> 0}{
  printf "VAR_IMP,%s,ANNUAL,,%s,%f\n", year[t], c, sum {s in S}VAR_IMP[t,s,c];
}
for {t in T, s in S, c in EXPORT:VAR_EXP[t,s,c] <> 0}{
  printf "VAR_EXP,%s,%s,,%s,%f\n", t, s, c, VAR_EXP[t,s,c];
}
for {t in T, c in EXPORT:(sum {s in S}VAR_EXP[t,s,c]) <> 0}{
  printf "VAR_EXP,%s,ANNUAL,,%s,%f\n", year[t], c, sum {s in S}VAR_EXP[t,s,c];
}

#T, S, C
for {t in T, s in S, c in C:EQ_COMBAL[t,s,c].dual<> 0}{
  printf "C_PRICE,%s,%s,,%s,%f\n", year[t], s, c, EQ_COMBAL[t,s,c].dual;
}
#T, C
for {t in T, c in C:(sum{s in S} fraction[s]*EQ_COMBAL[t,s,c].dual) <> 0}{
  printf "C_PRICE,%s,ANNUAL,,%s,%f\n", year[t], c, sum{s in S} fraction[s]*EQ_COMBAL[t,s,c].dual;
}

#T,S,P,C
for {t in T, s in S, p in P, c in C_MAP[p]:VAR_COM[t,s,p,c] <> 0}{
  printf "VAR_COM,%s,%s,%s,%s,%f\n", year[t], s, p, c, VAR_COM[t,s,p,c];
}

#T,P,C
for {t in T, p in P, c in C_MAP[p]:(sum{s in S} VAR_COM[t,s,p,c]) <> 0}{
  printf "VAR_COM,%s,ANNUAL,%s,%s,%f\n", year[t], p, c, sum{s in S} VAR_COM[t,s,p,c];
}

#T,C
for {t in T, c in DEM:demand[t,c] <> 0}{
  printf "DEMAND,%s,ANNUAL,,%s,%f\n", year[t], c, demand[t,c];
}

#T, S, C
for {t in T, s in S, c in IMPORT}{
  printf "COST_IMP,%s,%s,,%s,%f\n", year[t], s, c, cost_imp[t,s,c];
}

#T, S, AGG
for {t in T, s in S, agg in AGG : VAR_AGG[t,s,agg] <>0}{
  printf "AGGREGATE,%s,%s,,%s,%f\n", year[t], s, agg, VAR_AGG[t,s,agg];
}
#T, AGG
for {t in T, agg in AGG:(sum{s in S} VAR_AGG[t,s,agg]) <> 0}{
  printf "AGGREGATE,%s,ANNUAL,,%s,%f\n", year[t], agg, sum{s in S} VAR_AGG[t,s,agg];
}

#T, S, C
for {t in T, s in S, c in C:total_net_amount[t,s,c] <> 0}{
  printf "TOTAL_NET_AMOUNT,%s,%s,,%s,%f\n", year[t], s, c, total_net_amount[t,s,c];
}
#T, C
for {t in T, c in C:(sum{s in S} total_net_amount[t,s,c]) <> 0}{
  printf "TOTAL_NET_AMOUNT,%s,ANNUAL,,%s,%f\n", year[t], c, sum{s in S} total_net_amount[t,s,c];
}

end;