:javascript
  var filter = #{@stored_query.digest_filter.to_json};
  var variables = #{StoredQuery::INDEX.to_json};
  function var_r(variable){
    var s = "";
    $('#'+ variable + ' li').each(function(index) {
      if (index>1){s += "+";}
      if (index>0){s += $(this).attr('id');}
    });
    $('#stored_query_' + variable).attr('value',s);
  }
  function filter_r(){
    var s ="";
    for(i=0;i<filter.length;i++){
      if (filter[i].not != "") {
        s+= "!"; 
      }
      s+= filter[i].variable;
      s+=" %in% ";
      if (filter[i].func == "contain") {
        s+= "grep('" + filter[i].arg + "'," +
          filter[i].variable + ",value=TRUE)";
      }
      if (filter[i].func == "belong to") {
        s += "c(";
        array = filter[i].arg.split(",")
        for(j=0;j<array.length;j++){
          array[j] = "'" + array[j] + "'";
        }
        s += array.join(",") + ")";
      }
      if(i<filter.length-1){
        s += " & "
      }
    }
    $('#stored_query_filters').attr('value',s);
  }
  function remove_cond(i){
    filter.splice(i,1);
    display_filter_list();
    filter_r();
  }
  function add_cond(){
    new_cond = { "not"       : $('#new_not').val(),
      "func"      : $('#new_func').val(),
      "variable"  : $('#new_var').val(),
      "arg"       : $('#new_arg').val()};
    if (new_cond.arg.length>0){
      filter.push(new_cond);
      display_filter_list();
      filter_r();
    }
  }
  function display_filter_list(){
    $('.conditions_list').empty();
    last_row = "<tr>" +
      "<td><select id=\"new_var\">" +
  #{options_for_select(StoredQuery::INDEX.invert).to_json} +
      "</select></td>" +
      "<td>must <select id=\"new_not\">" +
  #{options_for_select(['','not ']).to_json} + "</select> <select id=\"new_func\">" +
  #{options_for_select(['contain','belong to']).to_json} +
      "<td><input type=\"text\" id=\"new_arg\" /></td>" +
      "<td><a onclick='add_cond()'>Add</a></td>" +
      "</select></td>" +
      "</tr>";
    $('.conditions_list').prepend(last_row);
    for(i=filter.length-1;i>=0;i--){
      row = "<tr>" +
        "<td>" + variables[filter[i].variable] + "</td>" +
        "<td>must " + filter[i].not + filter[i].func + "</td>" +
        "<td>" + filter[i].arg + "</td>" +
        "<td><a onclick='remove_cond(" + i + ")'>Remove</a></td>" +
        "</tr>";
      $('.conditions_list').prepend(row);
    }
  }
  $(function() {
    $("#rows, #choices, #columns").sortable({
      items: 'li:not(.table_def_head)',
      connectWith: '.table_def',
      dropOnEmpty: true,
      stop: function(event, ui) {
        var_r('rows');
        var_r('columns');
      }
    });
    $("#rows, #choices, #columns").disableSelection();
  });
  $(document).ready(function() {
    display_filter_list();
  });

.grid_2
  .box
    %h2 Action
    .block
      %p
        = link_to 'Browse all', stored_queries_path, :class => "action browse"
      %p
        = link_to 'New Stored query', new_stored_query_path, :class => "action new"
      %p
        = link_to 'Duplicate', duplicate_stored_query_path, :confirm => 'Are you sure?', :class => "action duplicate"
        = link_to 'Delete', @stored_query, :confirm => 'Are you sure?', :method => :delete, :class => "action delete"

.grid_10
  .box
    %h2 Stored query fields
    .block
      = form_for(@stored_query) do |f|
        = render "shared/error_messages", :target => @stored_query
        %p
          = f.label :name
          = f.text_field :name, :size => 50
        %p
          = f.label  :display
          = f.select :display, StoredQuery::DISPLAY.collect{ |a| [a.humanize,a]  }
        %p
          = f.label  :commodity_set
          = f.select :commodity_set, StoredQuery::AGGREGATES.collect{ |a| [a,a.downcase]  }
          = f.label  :variable
          = f.select :variable, StoredQuery::VARIABLES.collect{ |a| [a,a] }
        %p
          Columns/Rows (drag and drop elements)
          = f.hidden_field :rows
          = f.hidden_field :columns

          %ul#choices.table_def
            %li.table_def_head Unused
            - @stored_query.unused.each do |item|
              %li{:class=>"table_def_default",:id=>"#{item}"}= StoredQuery::INDEX[item.strip]

          %ul#rows.table_def
            %li.table_def_head Rows
            - @stored_query.rows.split('+').each do |i|
              %li.table_def_default{:id=>"#{i}"}= StoredQuery::INDEX[i.strip]

          %ul#columns.table_def
            %li.table_def_head Columns
            - @stored_query.columns.split('+').each do |i|
              %li.table_def_default{:id=>"#{i}"}= StoredQuery::INDEX[i.strip]
        .clear
        %p
          = f.label :filters
          %br
          = f.hidden_field :filters, :value => raw(@stored_query[:filters])
          %table
            %thead
              %tr
                %th Variable
                %th Function
                %th Arguments
                %th& &nbsp;
            %tbody.conditions_list
        %p= f.submit 'Update'
.clear
